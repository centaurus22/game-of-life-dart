// Mocks generated by Mockito 5.4.6 from annotations
// in game_of_life_dart/test/use_cases/list_dimensions_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:dart_console/src/console.dart' as _i3;
import 'package:dart_console/src/consolecolor.dart' as _i5;
import 'package:dart_console/src/key.dart' as _i2;
import 'package:dart_console/src/textalignment.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeKey_0 extends _i1.SmartFake implements _i2.Key {
  _FakeKey_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Console].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsole extends _i1.Mock implements _i3.Console {
  MockConsole() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get rawMode =>
      (super.noSuchMethod(Invocation.getter(#rawMode), returnValue: false)
          as bool);

  @override
  bool get supportsEmoji =>
      (super.noSuchMethod(Invocation.getter(#supportsEmoji), returnValue: false)
          as bool);

  @override
  int get windowWidth =>
      (super.noSuchMethod(Invocation.getter(#windowWidth), returnValue: 0)
          as int);

  @override
  int get windowHeight =>
      (super.noSuchMethod(Invocation.getter(#windowHeight), returnValue: 0)
          as int);

  @override
  bool get hasTerminal =>
      (super.noSuchMethod(Invocation.getter(#hasTerminal), returnValue: false)
          as bool);

  @override
  String get newLine =>
      (super.noSuchMethod(
            Invocation.getter(#newLine),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#newLine),
            ),
          )
          as String);

  @override
  set rawMode(bool? value) => super.noSuchMethod(
    Invocation.setter(#rawMode, value),
    returnValueForMissingStub: null,
  );

  @override
  set cursorPosition(_i3.Coordinate? cursor) => super.noSuchMethod(
    Invocation.setter(#cursorPosition, cursor),
    returnValueForMissingStub: null,
  );

  @override
  void clearScreen() => super.noSuchMethod(
    Invocation.method(#clearScreen, []),
    returnValueForMissingStub: null,
  );

  @override
  void eraseLine() => super.noSuchMethod(
    Invocation.method(#eraseLine, []),
    returnValueForMissingStub: null,
  );

  @override
  void eraseCursorToEnd() => super.noSuchMethod(
    Invocation.method(#eraseCursorToEnd, []),
    returnValueForMissingStub: null,
  );

  @override
  void hideCursor() => super.noSuchMethod(
    Invocation.method(#hideCursor, []),
    returnValueForMissingStub: null,
  );

  @override
  void showCursor() => super.noSuchMethod(
    Invocation.method(#showCursor, []),
    returnValueForMissingStub: null,
  );

  @override
  void cursorLeft() => super.noSuchMethod(
    Invocation.method(#cursorLeft, []),
    returnValueForMissingStub: null,
  );

  @override
  void cursorRight() => super.noSuchMethod(
    Invocation.method(#cursorRight, []),
    returnValueForMissingStub: null,
  );

  @override
  void cursorUp() => super.noSuchMethod(
    Invocation.method(#cursorUp, []),
    returnValueForMissingStub: null,
  );

  @override
  void cursorDown() => super.noSuchMethod(
    Invocation.method(#cursorDown, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetCursorPosition() => super.noSuchMethod(
    Invocation.method(#resetCursorPosition, []),
    returnValueForMissingStub: null,
  );

  @override
  void setForegroundColor(_i5.ConsoleColor? foreground) => super.noSuchMethod(
    Invocation.method(#setForegroundColor, [foreground]),
    returnValueForMissingStub: null,
  );

  @override
  void setBackgroundColor(_i5.ConsoleColor? background) => super.noSuchMethod(
    Invocation.method(#setBackgroundColor, [background]),
    returnValueForMissingStub: null,
  );

  @override
  void setForegroundExtendedColor(int? colorValue) => super.noSuchMethod(
    Invocation.method(#setForegroundExtendedColor, [colorValue]),
    returnValueForMissingStub: null,
  );

  @override
  void setBackgroundExtendedColor(int? colorValue) => super.noSuchMethod(
    Invocation.method(#setBackgroundExtendedColor, [colorValue]),
    returnValueForMissingStub: null,
  );

  @override
  void setTextStyle({
    bool? bold = false,
    bool? faint = false,
    bool? italic = false,
    bool? underscore = false,
    bool? blink = false,
    bool? inverted = false,
    bool? invisible = false,
    bool? strikethru = false,
  }) => super.noSuchMethod(
    Invocation.method(#setTextStyle, [], {
      #bold: bold,
      #faint: faint,
      #italic: italic,
      #underscore: underscore,
      #blink: blink,
      #inverted: inverted,
      #invisible: invisible,
      #strikethru: strikethru,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void resetColorAttributes() => super.noSuchMethod(
    Invocation.method(#resetColorAttributes, []),
    returnValueForMissingStub: null,
  );

  @override
  void write(Object? text) => super.noSuchMethod(
    Invocation.method(#write, [text]),
    returnValueForMissingStub: null,
  );

  @override
  void writeErrorLine(Object? text) => super.noSuchMethod(
    Invocation.method(#writeErrorLine, [text]),
    returnValueForMissingStub: null,
  );

  @override
  void writeLine([
    Object? text,
    _i6.TextAlignment? alignment = _i6.TextAlignment.left,
  ]) => super.noSuchMethod(
    Invocation.method(#writeLine, [text, alignment]),
    returnValueForMissingStub: null,
  );

  @override
  void writeAligned(
    Object? text, [
    int? width,
    _i6.TextAlignment? alignment = _i6.TextAlignment.left,
  ]) => super.noSuchMethod(
    Invocation.method(#writeAligned, [text, width, alignment]),
    returnValueForMissingStub: null,
  );

  @override
  _i2.Key readKey() =>
      (super.noSuchMethod(
            Invocation.method(#readKey, []),
            returnValue: _FakeKey_0(this, Invocation.method(#readKey, [])),
          )
          as _i2.Key);

  @override
  String? readLine({
    bool? cancelOnBreak = false,
    bool? cancelOnEscape = false,
    bool? cancelOnEOF = false,
    void Function(String, _i2.Key)? callback,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readLine, [], {
              #cancelOnBreak: cancelOnBreak,
              #cancelOnEscape: cancelOnEscape,
              #cancelOnEOF: cancelOnEOF,
              #callback: callback,
            }),
          )
          as String?);
}
